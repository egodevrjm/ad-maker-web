#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('=== FFmpeg Path Fix for Ad Maker ===\n');

// Find FFmpeg
async function findFFmpeg() {
  const commonPaths = [
    '/usr/local/bin/ffmpeg',
    '/usr/bin/ffmpeg',
    '/opt/homebrew/bin/ffmpeg',
    '/opt/local/bin/ffmpeg',
    '/home/linuxbrew/.linuxbrew/bin/ffmpeg'
  ];
  
  // First try which
  try {
    const { stdout } = await execAsync('which ffmpeg');
    const ffmpegPath = stdout.trim();
    if (ffmpegPath) {
      console.log(`‚úÖ Found FFmpeg via which: ${ffmpegPath}`);
      return path.dirname(ffmpegPath);
    }
  } catch (e) {
    // Continue to check common paths
  }
  
  // Check common paths
  for (const ffmpegPath of commonPaths) {
    if (fs.existsSync(ffmpegPath)) {
      console.log(`‚úÖ Found FFmpeg at: ${ffmpegPath}`);
      return path.dirname(ffmpegPath);
    }
  }
  
  return null;
}

// Update server.js to use full paths
async function updateServerFile() {
  const serverPath = path.join(__dirname, 'backend-node/server.js');
  
  if (!fs.existsSync(serverPath)) {
    console.error('‚ùå backend-node/server.js not found');
    return;
  }
  
  const ffmpegDir = await findFFmpeg();
  
  if (!ffmpegDir) {
    console.error('‚ùå FFmpeg not found on system');
    console.log('\nPlease install FFmpeg:');
    console.log('  macOS: brew install ffmpeg');
    console.log('  Ubuntu: sudo apt-get install ffmpeg');
    return;
  }
  
  // Read current server.js
  let serverContent = fs.readFileSync(serverPath, 'utf8');
  
  // Check if already patched
  if (serverContent.includes('FFMPEG_PATH')) {
    console.log('‚ÑπÔ∏è  Server.js already has FFmpeg path configuration');
    return;
  }
  
  // Create patch
  const patch = `
// FFmpeg path configuration
const FFMPEG_PATH = '${ffmpegDir}/ffmpeg';
const FFPROBE_PATH = '${ffmpegDir}/ffprobe';

// Override exec commands to use full paths
const originalExecAsync = execAsync;
const execAsync = async (command, options) => {
  // Replace ffmpeg and ffprobe with full paths
  if (command.startsWith('ffmpeg ')) {
    command = command.replace(/^ffmpeg/, FFMPEG_PATH);
  } else if (command.startsWith('ffprobe ')) {
    command = command.replace(/^ffprobe/, FFPROBE_PATH);
  }
  return originalExecAsync(command, options);
};
`;
  
  // Find where to insert (after imports)
  const importEndIndex = serverContent.lastIndexOf('import');
  const lineEndIndex = serverContent.indexOf('\n', importEndIndex);
  
  if (lineEndIndex !== -1) {
    serverContent = 
      serverContent.slice(0, lineEndIndex + 1) + 
      patch + 
      serverContent.slice(lineEndIndex + 1);
    
    // Backup original
    fs.writeFileSync(serverPath + '.backup', fs.readFileSync(serverPath));
    
    // Write updated file
    fs.writeFileSync(serverPath, serverContent);
    
    console.log('‚úÖ Updated server.js with FFmpeg paths');
    console.log(`   FFmpeg: ${ffmpegDir}/ffmpeg`);
    console.log(`   FFprobe: ${ffmpegDir}/ffprobe`);
    console.log('\n‚úÖ Backup saved as server.js.backup');
    console.log('\nüîÑ Please restart the app with ./start-app.sh');
  } else {
    console.error('‚ùå Could not patch server.js - unexpected format');
  }
}

// Alternative: Create wrapper script
async function createWrapperScript() {
  const ffmpegDir = await findFFmpeg();
  
  if (!ffmpegDir) {
    return;
  }
  
  const wrapperContent = `#!/bin/bash
# FFmpeg wrapper for Ad Maker

export PATH="${ffmpegDir}:\$PATH"
cd "$(dirname "\$0")"
node server.js
`;
  
  const wrapperPath = path.join(__dirname, 'backend-node/server-with-ffmpeg.sh');
  fs.writeFileSync(wrapperPath, wrapperContent);
  fs.chmodSync(wrapperPath, '755');
  
  console.log('\n‚úÖ Alternative: Created wrapper script');
  console.log('   backend-node/server-with-ffmpeg.sh');
  console.log('   This ensures FFmpeg is in PATH when running the server');
}

// Run fixes
async function main() {
  console.log('Attempting to fix FFmpeg path issue...\n');
  
  await updateServerFile();
  await createWrapperScript();
  
  console.log('\n=== Next Steps ===');
  console.log('1. Restart the application: ./start-app.sh');
  console.log('2. Try creating a video again');
  console.log('3. Check backend logs for any errors');
}

main().catch(console.error);
